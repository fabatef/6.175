1. The one-bit multiplexer uses 2 AND gates, 1 OR gate and 1 NOT gate for a total of 4 logic gates. The 5-bit multiplexer makes 5 calls to multiplexer1, which the BSV compiler, during the static elaboration phase, will replace with 5 separate multiplexer1's. Therefore, multiplexer5 uses 20 logic gates. Similarly, an N-bit multiplexer will use 4N logic gates.

2. The 8-bit ripple-carry adder is a cascade of 8 full adders, so it requires 40 gates. The 8-bit carry-select adder uses a 4-bit ripple-carry adder to sum the lower 4 bits, and two 4-bit ripple-carry adders to sum the upper 4 bits. So, it requires 60 gates.

You forgot to count the logic gates required to do the muxes in the RCA, you have a 4 bit mux, and a 1 bit mux.
(-1)
3. For the 8-bit ripple-carry adder: 40A (since the next full adder has to wait until the previous one is done and returns an output)

For the 8-bit carry-select adder: 20A + 4M (since all three of the 4-bit ripple-carry adders can compute their results parallely, it will take 20A time for the inputs to the multiplexers to be ready. Then, both multiplexer4 and multiplexer1 can compute their result in 4M and M time respectively.)

You have a reasoning mostly right here (you get when things are processed in parallel), but I don't understand a couple of points:
- "A" denote the delay of one full adder, so in the case of the RCA, it needs to go through all of the full adder, there are 8 of them, so 8A and not 40A. (Maybe you understood that the fulladder being 5 gates meant that you needed to do 8*5?  If you need extra explanation to sort this mistake out, please ask a question by email on piazza )
- If you look at your code for multiplexer4, the 4 bits are "computed"in parallel, so really in term of delay one bit mux and 4 bit muxes cost the same: just M. (Though they don't cost the same in term of number of gates).

(-1)

4. 3 hours

Grade: 23/25 => 92%
